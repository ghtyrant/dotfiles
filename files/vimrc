
if has('vim_starting')
  set nocompatible               " Be iMproved

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

""""" Hotkeys
let mapleader = " "

nnoremap <silent> <F8> :TlistToggle<CR>
nnoremap <silent> <F7> :NERDTreeTabsToggle<CR>

command! DiffOrig let g:diffline = line('.') | vert new | set bt=nofile | r # | 0d_ | diffthis | :exe "norm! ".g:diffline."G" | wincmd p | diffthis | wincmd p
nnoremap <leader>do :DiffOrig<cr>
nnoremap <leader>dc :q<cr>:diffoff<cr>:exe "norm! ".g:diffline."G"<cr>

nnoremap <silent> <C-Right> :bnext<CR>
nnoremap <silent> <C-Left> :bprevious<CR>
nnoremap <silent> <leader>bn :enew<CR>
nnoremap <silent> <leader>bc :bp <BAR> bd #<CR>

""""" Plugins
" Required:
call neobundle#begin(expand('~/.vim/bundle'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
NeoBundle 'bling/vim-airline'
NeoBundle 'flazz/vim-colorschemes'
NeoBundle 'scrooloose/syntastic'
"NeoBundle 'scrooloose/nerdtree'
"NeoBundle 'jistr/vim-nerdtree-tabs'
NeoBundle 'klen/python-mode'
NeoBundle 'vim-scripts/taglist.vim'
NeoBundle 'wting/rust.vim'
NeoBundle 'ctrlpvim/ctrlp.vim'
NeoBundle 'tpope/vim-sleuth'
NeoBundle 'git://git.code.sf.net/p/vim-latex/vim-latex'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'tpope/vim-vinegar'
NeoBundle 'majutsushi/tagbar'

" Required:
call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck
"End NeoBundle Scripts-------------------------

" Detect filetypes, load filetype plugins and indent files
filetype on
filetype plugin on
filetype indent on

" Set default encoding
set encoding=utf-8

" Enable syntax highlighting
syntax on

" Display line numbers
set number
" Display cursor position & position in file
set ruler

" Allow modified buffers to be hidden
set hidden

" One tab is 4 spaces
set tabstop=4
set expandtab

" Same is used for indentation with >> and <<
set shiftwidth=4

" Let backspace behave like in different editors in insert mode
set backspace=indent,eol,start

" Always display at least 5 lines above/below the current line
set scrolloff=5

" Allow usage of mouse (don't hurt me!)
set mouse=a
"set ttymouse=urxvt

" Ignore case in search operations per default
" except when search word is in uppercase
" Also, highlight found keywords
set ignorecase
set smartcase
set hlsearch

" c ... Continue search at the end of a match, not the next character
" e ... Automatically put <CR> when executing a register
" s ... Set buffer options when the buffer is entered for the first time
" displaying the line itself
set cpoptions=ces

" Always display status line
set laststatus=2

" Show command and mode in the last line
set showcmd
set showmode

" Keep command history
set history=200

" Set status line
set statusline=%<\ %n:%f\ %m%r%y%=%-35.(line:\ %l\/%L,\ col:\ %c%V\ (%P)%)

" Open files without folding anything
set foldlevelstart=20

" gentooish looks good in terminals
"colorscheme gentooish
colorscheme github

" Explore
map <silent> <C-E> :Lexplore<CR>

" Hit enter in the file browser to open the selected
" file with :vsplit to the right of the browser.
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = -28
let g:netrw_banner = 0

" Change directory to the current buffer when opening files.
set autochdir

" Default to tree mode
let g:netrw_liststyle = 3

" Hotkeys
let mapleader = ","

nnoremap <silent> <F8> :TagbarToggle<CR>

command! DiffOrig let g:diffline = line('.') | vert new | set bt=nofile | r # | 0d_ | diffthis | :exe "norm! ".g:diffline."G" | wincmd p | diffthis | wincmd p
nnoremap <leader>do :DiffOrig<cr>
nnoremap <leader>dc :q<cr>:diffoff<cr>:exe "norm! ".g:diffline."G"<cr>

" pymode settings
let g:pymode_rope_lookup_project = 0
let g:pymode_rope = 0
let Tlist_Use_Right_Window = 1

" Syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Use luacheck for lua files instead of luac
let g:syntastic_lua_checkers = ['luac', 'luacheck']
let g:syntastic_lua_luacheck_args = "--globals im Channel Object lib --std=lua52" 

let g:syntastic_cpp_checkers = ['clang++']
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_cpp_compiler_options = '-std=c++14'


""""" pymode settings
let g:pymode_rope_lookup_project = 0
" Disable 'Line too long' warning
let g:pymode_lint_ignore="E501"

""""" Disable cursor keys
"noremap <Up> <NOP>
"noremap <Down> <NOP>
"noremap <Left> <NOP>
"noremap <Right> <NOP>

""""" TagList options
let Tlist_WinWidth = 50
let Tlist_Inc_Winwidth = 0
let Tlist_Use_Right_Window = 1

" vim-airline
let g:airline_powerline_fonts = 1

let g:airline#extensions#tabline#enabled = 1
" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

" ctrlp
let g:ctrlp_cmd = 'CtrlPTag'
let g:ctrlp_extensions = ['tag', 'undo']

" LaTeX tools
"setlocal makeprg=bibtex\ $*\ \&\&\ pdflatex\ \-file\-line\-error\ \-interaction=nonstopmode\ $*\\\|\ grep\ \-E\ '\\w+:[0-9]{1,4}:\\\ '
"setlocal makeprg=pdflatex\ \-file\-line\-error\ \-interaction=nonstopmode\ $*
setlocal errorformat=%f:%l:\ %m
map <buffer> <F3> :w<CR>:make<CR>

let g:pymode_rope = 0

" Automatically remove trailing whitespace in C++ files on save
autocmd BufWritePre *.h,*.hpp,*.cpp :%s/\s\+$//e
